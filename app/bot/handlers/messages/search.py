from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.bot.backend_requests import fetch_from_backend
from app.core.redis import redis_cache
from app.bot.keyboards.inline import actor_movies_keyboard, movie_details_keyboard, get_actor_hash

router = Router()
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"
MOVIES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

class SearchState(StatesGroup):
    movie_title = State()
    actor_name = State()

@router.message(SearchState.actor_name)
async def get_actor_movies_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∞–∫—Ç—ë—Ä–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    actor_name = message.text.strip().lower()

    if not actor_name:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞.")
        return

    actor_hash = get_actor_hash(actor_name)
    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)

    if not movies:
        try:
            movies = await fetch_from_backend("/actors/movies/", {"name": actor_name})
            if movies:
                await redis_cache.set(cache_key, movies, expire=86400)  # –ö—ç—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ 1 –¥–µ–Ω—å
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await state.clear()
            return

    await state.clear()

    if not movies:
        await message.answer(f"üé¨ –£ {actor_name} –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ.")
        return

    keyboard = actor_movies_keyboard(movies, actor_name)
    await message.answer(f"üé¨ –§–∏–ª—å–º—ã —Å {actor_name}:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("movie_"))
async def send_movie_details(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º movie_index –∏ actor_hash; —Ä–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤—ã–º –¥–≤—É–º —Å–∏–º–≤–æ–ª–∞–º '_'
        _, movie_index, actor_hash = callback.data.split("_", 2)
        movie_index = int(movie_index)
    except Exception:
        await callback.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)

    if not movies or movie_index >= len(movies):
        await callback.answer("‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    movie = movies[movie_index]
    caption = (
        f"üé¨ [{movie['title']} ({movie.get('release_date', '‚ùì')[:4]})]({movie['tmdb_url']})\n\n"
        f"üìñ {movie.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}"
    )

    poster_url = movie.get("poster_path")
    if poster_url:
        poster_url = f"{TMDB_IMAGE_BASE_URL}{poster_url}"
        await callback.message.answer_photo(photo=poster_url, caption=caption, parse_mode="Markdown",
                                            reply_markup=movie_details_keyboard(movie))
    else:
        await callback.message.answer(caption, parse_mode="Markdown", reply_markup=movie_details_keyboard(movie))

    await callback.answer()

@router.callback_query(F.data.startswith("next_page_"))
async def send_next_page(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤"""
    try:
        _, page, actor_hash = callback.data.split("_", 2)
        page = int(page)
    except Exception:
        await callback.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)

    if not movies:
        await callback.answer("‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º actor_hash –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è –≤ inline –ø—Ä–æ–≤–µ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ —É–∂–µ —Ö—ç—à
    keyboard = actor_movies_keyboard(movies, actor_hash, page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()
