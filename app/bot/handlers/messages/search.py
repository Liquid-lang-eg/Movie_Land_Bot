from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.bot.backend_requests import fetch_from_backend

router = Router()
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"

MOVIES_PER_PAGE = 5
USER_MOVIE_CACHE = {} # - –∑–∞–≥–ª—É—à–∫–∞ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω redis

class SearchState(StatesGroup):
    movie_title = State()
    actor_name = State()



@router.message(SearchState.movie_title)
async def get_movie_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    movie_title = message.text.strip()

    if not movie_title:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return

    try:
        movie = await fetch_from_backend("/movies/search/", {"title": movie_title})
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await state.clear()
        return

    await state.clear()

    if not movie:
        await message.answer(f"üö´ –§–∏–ª—å–º '{movie_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    caption = (
        f"üé¨ [{movie['title']} ({movie.get('release_date', '‚ùì')[:4]})]({movie['tmdb_url']})\n\n"
        f"üìñ {movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}"
    )

    poster_url = movie.get("poster_path")
    if poster_url:
        poster_url = f"https://image.tmdb.org/t/p/w500{poster_url}"
        await message.answer_photo(photo=poster_url, caption=caption, parse_mode="Markdown")
    else:
        await message.answer(caption, parse_mode="Markdown")

@router.message(SearchState.actor_name)
async def get_actor_movies_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∞–∫—Ç—ë—Ä–∞"""
    actor_name = message.text.strip()

    if not actor_name:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞.")
        return

    try:
        movies = await fetch_from_backend("/actors/movies/", {"name": actor_name})
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await state.clear()
        return

    await state.clear()

    if not movies:
        await message.answer(f"üé¨ –£ {actor_name} –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ.")
        return

    USER_MOVIE_CACHE[message.from_user.id] = movies

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{movie['title']} ({movie.get('release_date', '‚ùì')[:4]})",
                                  callback_data=f"movie_{i}")]
            for i, movie in enumerate(movies[:10])
        ]
    )

    await message.answer(f"üé¨ –§–∏–ª—å–º—ã —Å {actor_name}:", reply_markup=keyboard)





