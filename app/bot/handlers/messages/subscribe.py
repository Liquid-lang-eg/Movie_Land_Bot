from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from app.bot.backend_requests import get_genres, get_user_subscriptions, subscribe_genre, unsubscribe_genre
from app.bot.handlers.pagination.pagination import paginate, pagination_keyboard

router = Router()
GENRES_PER_PAGE = 6

@router.callback_query(F.data == "subscribe_genre")
async def show_genre_list(callback: CallbackQuery, page: int = 0):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    tg_id = callback.from_user.id
    genres = await get_genres()
    user_subs = await get_user_subscriptions(tg_id)
    user_genre_ids = {sub["genre_id"] for sub in user_subs} if user_subs else set()

    page_genres, total_pages = paginate(genres, page, GENRES_PER_PAGE)
    # breakpoint()
    genre_buttons = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if genre['id'] in user_genre_ids else ''} {genre['name']}",
            callback_data=f"subscribe_{genre['id']}"
        )]
        for genre in page_genres
    ]

    pagination_kb = pagination_keyboard("genre", page, total_pages, extra_buttons=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    print(InlineKeyboardButton)
    final_buttons = genre_buttons + pagination_kb.inline_keyboard
    final_keyboard = InlineKeyboardMarkup(inline_keyboard=final_buttons)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏:", reply_markup=final_keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("genre_page_"))
async def paginate_genres(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤"""
    try:
        _, page_str = callback.data.rsplit("_", 1)
        page = int(page_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await show_genre_list(callback, page)

@router.callback_query(F.data.startswith("subscribe_"))
async def handle_subscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∂–∞–Ω—Ä"""
    try:
        _, genre_id_str = callback.data.split("_", 1)
        genre_id = int(genre_id_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    tg_id = callback.from_user.id
    result = await subscribe_genre(tg_id, genre_id)
    if result and result.get("detail") == "Subscribed":
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
    else:
        await callback.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∂–∞–Ω—Ä.")

    await show_genre_list(callback, page=0)

@router.callback_query(F.data.startswith("unsubscribe_"))
async def handle_unsubscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∂–∞–Ω—Ä–∞"""
    try:
        _, genre_id_str = callback.data.split("_", 1)
        genre_id = int(genre_id_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    tg_id = callback.from_user.id
    result = await unsubscribe_genre(tg_id, genre_id)
    if result and result.get("detail") == "Unsubscribed":
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!")
    else:
        await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∂–∞–Ω—Ä.")

    await show_genre_list(callback, page=0)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from app.bot.keyboards.inline import main_menu  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    await callback.answer()
