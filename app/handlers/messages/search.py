from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from backend_requests import fetch_from_backend
from core.redis import redis_cache
from keyboards.search import (
    actor_movies_keyboard,
    movie_details_keyboard,
)
from utils.utils import get_actor_hash
from aiogram.fsm.state import State, StatesGroup

router = Router()
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"
MOVIES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É


class SearchState(StatesGroup):
    movie_title = State()
    actor_name = State()


# üé¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º"
@router.callback_query(F.data == "search_movie_by_title")
async def ask_movie_title(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    await state.set_state(SearchState.movie_title)
    await callback.answer()


@router.message(SearchState.movie_title)
async def search_movie_by_title(message: Message, state: FSMContext):
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {message.text}")
    title = message.text.strip()
    if not title:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return

    cache_key = f"movie_search:{title.lower()}"
    movie = await redis_cache.get(cache_key)

    if not movie:
        try:
            movie = await fetch_from_backend(
                "/movies/search/", {"title": title, "language": "ru-RU"}
            )
            print(f"üé¨ –û—Ç–≤–µ—Ç –æ—Ç –±–µ–∫–µ–Ω–¥–∞: {movie}")
            if not movie:
                await message.answer(f"üîç –§–∏–ª—å–º '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            await redis_cache.set(cache_key, movie, expire=86400)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await state.clear()
            return

    await state.clear()

    # üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    movie_title = movie.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    release_date = movie.get("release_date", "‚ùì")[:4]
    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    movie_url = movie.get("tmdb_url", "https://www.themoviedb.org/")

    caption = f"üé¨ [{movie_title} ({release_date})]({movie_url})\n\n" f"üìñ {overview}"

    poster_url = movie.get("poster_path")
    if poster_url:
        poster_url = f"https://image.tmdb.org/t/p/w500{poster_url}"
        await message.answer_photo(
            photo=poster_url,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=movie_details_keyboard(movie),
        )
    else:
        await message.answer(
            caption, parse_mode="Markdown", reply_markup=movie_details_keyboard(movie)
        )


@router.message(SearchState.actor_name)
async def get_actor_movies_handler(message: Message, state: FSMContext):
    actor_name = message.text.strip().lower()
    if not actor_name:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞.")
        return

    actor_hash = get_actor_hash(actor_name)
    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)

    if not movies:
        try:
            movies = await fetch_from_backend("/actors/movies/", {"name": actor_name})
            if movies:
                await redis_cache.set(cache_key, movies, expire=86400)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await state.clear()
            return

    await state.clear()

    if not movies:
        await message.answer(f"üé¨ –£ {actor_name} –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ.")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º actor_hash –≤–º–µ—Å—Ç–æ actor_name
    keyboard = actor_movies_keyboard(
        movies, actor_hash, page=0, movies_per_page=MOVIES_PER_PAGE
    )
    await message.answer(f"üé¨ –§–∏–ª—å–º—ã —Å {actor_name}:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("actor_movies_"))
async def paginate_actor_movies(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∞–∫—Ç—ë—Ä–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç callback_data: "actor_movies_<actor_hash>_page_<page>"
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º rsplit, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        parts = callback.data.rsplit("_", 1)
        page = int(parts[1])
        # –ò–∑–≤–ª–µ–∫–∞–µ–º actor_hash –∏–∑ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏: —Ñ–æ—Ä–º–∞—Ç "actor_movies_<actor_hash>"
        actor_hash = parts[0].split("_")[2]
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)
    if not movies:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    keyboard = actor_movies_keyboard(movies, actor_hash, page, MOVIES_PER_PAGE)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("movie_"))
async def send_movie_details(callback: CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç callback_data: "movie_<movie_index>_<actor_hash>"
    """
    try:
        _, movie_index, actor_hash = callback.data.split("_", 2)
        movie_index = int(movie_index)
    except Exception:
        await callback.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)
    if not movies or movie_index >= len(movies):
        await callback.answer("‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    movie = movies[movie_index]
    caption = (
        f"üé¨ [{movie['title']} ({movie.get('release_date', '‚ùì')[:4]})]({movie['tmdb_url']})\n\n"
        f"üìñ {movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}"
    )

    poster_url = movie.get("poster_path")
    if poster_url:
        poster_url = f"{TMDB_IMAGE_BASE_URL}{poster_url}"
        await callback.message.answer_photo(
            photo=poster_url,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=movie_details_keyboard(movie, actor_hash, page=0),
        )
    else:
        await callback.message.answer(
            caption,
            parse_mode="Markdown",
            reply_markup=movie_details_keyboard(movie, actor_hash, page=0),
        )
    await callback.answer()


@router.callback_query(F.data.startswith("next_page_"))
async def send_next_page(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∞–∫—Ç—ë—Ä–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç callback_data: "next_page_<page>_<actor_hash>"
    """
    try:
        _, page_str, actor_hash = callback.data.split("_", 2)
        page = int(page_str)
    except Exception:
        await callback.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)
    if not movies:
        await callback.answer("‚ö† –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    keyboard = actor_movies_keyboard(movies, actor_hash, page, MOVIES_PER_PAGE)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("back_to_movie_list_"))
async def back_to_movie_list(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –¥–µ—Ç–∞–ª—è—Ö —Ñ–∏–ª—å–º–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–æ–≤.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç callback_data: "back_to_movie_list_<actor_hash>_<page>"
    """
    try:
        _, actor_hash, page_str = callback.data.split("_", 2)
        page = int(page_str)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    cache_key = f"actor_movies:{actor_hash}"
    movies = await redis_cache.get(cache_key)
    if not movies:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    keyboard = actor_movies_keyboard(movies, actor_hash, page, MOVIES_PER_PAGE)
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º caption –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.text:
        await callback.message.edit_text("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=keyboard)
    elif callback.message.caption:
        await callback.message.edit_caption("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=keyboard)
    else:
        await callback.message.answer("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=keyboard)
    await callback.answer()
